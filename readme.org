* Dotfiles for my local setup

This simple yet effective technique lets you track the files you care about
and it doesn't require any tools other than git. The files will be kept at
their intended location, without the need to create symlinks or copies.

Files are added to the repository by calling `dots add $HOME/.config/file` and when
issuing `git status` - only changes to files explicitly added will be shown.

To get a list of files not tracked by git, use `dots untracked` or `dots untracked-at $HOME/path/to/foo/bar`
to only show files in a specific subdirectory.

Dead simple!


** Alias
#+BEGIN_SRC bash
alias dotfiles ='git --git-dir=$HOME/.dotfiles.git/ --work-tree=$HOME'
#+END_SRC

** Setup
#+BEGIN_SRC bash
git init --bare $HOME/.dotfiles.git
dotfiles remote add origin https://github.com/dandyrunner/dotfiles.git
dotfiles commit -m "First commit"
dotfiles push -u origin master
#+END_SRC

** Configuration
#+BEGIN_SRC bash
dotfiles config status.showUntrackedFiles no
#+END_SRC


** Useful aliases
#+BEGIN_SRC bash
dotfiles config alias.untracked "status -u ."
dotfiles config alias.untracked-at "status -u"
#+END_SRC

** Usage
#+BEGIN_SRC bash
# Use the dotfiles alias like you would use the git command
dotfiles status
dotfiles add --update ...
dotfiles commit -m "..."
dotfiles push

# Listing files (not tracked by git)
dotiles untracked
dotfiles status -u .config/

# Listing files (tracked by git)
dotfiles ls-files
dotfiles ls-files .config/polybar/
#+END_SRC

**  Replication
#+BEGIN_SRC bash
git clone --recursive --separate-git-dir=$HOME/.dotfiles.git https://github.com/dandyrunner/dotfiles.git /tmp/dotfiles
rsync -rvl --exclude ".git" /tmp/dotfiles/ $HOME/
rm -r /tmp/dotfiles
dotfiles submodule update --init --recursive $HOME/
#+END_SRC
